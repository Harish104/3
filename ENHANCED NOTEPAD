import tkinter as tk
from tkinter import messagebox, filedialog, font, Toplevel, Label, Entry, Button, colorchooser, PhotoImage, ttk
import math
import json

LARGE_FONT_STYLE = ("Arial", 40, "bold")
SMALL_FONT_STYLE = ("Arial", 16)
DIGITS_FONT_STYLE = ("Arial", 24, "bold")
DEFAULT_FONT_STYLE = ("Arial", 20)

OFF_WHITE = "#F8FAFF"
WHITE = "#FFFFFF"
LIGHT_BLUE = "#CCEDFF"
LIGHT_GRAY = "#F5F5F5"
LABEL_COLOR = "#25265E"

class Calculator:
    def __init__(self, frame):
        self.frame = frame
        self.total_expression = ""
        self.current_expression = ""
        self.display_frame = self.create_display_frame()

        self.total_label, self.label = self.create_display_labels()

        self.digits = {
            7: (1, 1), 8: (1, 2), 9: (1, 3),
            4: (2, 1), 5: (2, 2), 6: (2, 3),
            1: (3, 1), 2: (3, 2), 3: (3, 3),
            0: (4, 2), '.': (4, 1)
        }
        self.operations = {"/": "\u00F7", "*": "\u00D7", "-": "-", "+": "+"}
        self.special_operations = {"sin": "sin", "cos": "cos", "tan": "tan", "log": "log", "ln": "ln", "exp": "exp"}

        self.buttons_frame = self.create_buttons_frame()

        self.buttons_frame.rowconfigure(0, weight=1)
        for x in range(1, 5):
            self.buttons_frame.rowconfigure(x, weight=1)
            self.buttons_frame.columnconfigure(x, weight=1)

        self.create_digit_buttons()
        self.create_operator_buttons()
        self.create_special_buttons()
        self.create_advanced_buttons()
        self.bind_keys()

    def bind_keys(self):
        self.frame.bind("<Return>", lambda event: self.evaluate())
        for key in self.digits:
            self.frame.bind(str(key), lambda event, digit=key: self.add_to_expression(digit))

        for key in self.operations:
            self.frame.bind(key, lambda event, operator=key: self.append_operator(operator))

    def create_special_buttons(self):
        self.create_clear_button()
        self.create_equals_button()
        self.create_square_button()
        self.create_sqrt_button()

    def create_advanced_buttons(self):
        self.create_sin_button()
        self.create_cos_button()
        self.create_tan_button()
        self.create_log_button()
        self.create_ln_button()
        self.create_exp_button()

    def create_display_labels(self):
        total_label = tk.Label(self.display_frame, text=self.total_expression, anchor=tk.E, bg=LIGHT_GRAY,
                               fg=LABEL_COLOR, padx=24, font=SMALL_FONT_STYLE)
        total_label.pack(expand=True, fill='both')

        label = tk.Label(self.display_frame, text=self.current_expression, anchor=tk.E, bg=LIGHT_GRAY,
                         fg=LABEL_COLOR, padx=24, font=LARGE_FONT_STYLE)
        label.pack(expand=True, fill='both')

        return total_label, label

    def create_display_frame(self):
        frame = tk.Frame(self.frame, height=221, bg=LIGHT_GRAY)
        frame.pack(expand=True, fill="both")
        return frame

    def add_to_expression(self, value):
        self.current_expression += str(value)
        self.update_label()

    def create_digit_buttons(self):
        for digit, grid_value in self.digits.items():
            button = tk.Button(self.buttons_frame, text=str(digit), bg=WHITE, fg=LABEL_COLOR, font=DIGITS_FONT_STYLE,
                               borderwidth=0, command=lambda x=digit: self.add_to_expression(x))
            button.grid(row=grid_value[0], column=grid_value[1], sticky=tk.NSEW)

    def append_operator(self, operator):
        self.current_expression += operator
        self.total_expression += self.current_expression
        self.current_expression = ""
        self.update_total_label()
        self.update_label()

    def create_operator_buttons(self):
        i = 0
        for operator, symbol in self.operations.items():
            button = tk.Button(self.buttons_frame, text=symbol, bg=OFF_WHITE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE,
                               borderwidth=0, command=lambda x=operator: self.append_operator(x))
            button.grid(row=i, column=4, sticky=tk.NSEW)
            i += 1

    def clear(self):
        self.current_expression = ""
        self.total_expression = ""
        self.update_label()
        self.update_total_label()

    def create_clear_button(self):
        button = tk.Button(self.buttons_frame, text="C", bg=OFF_WHITE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE,
                           borderwidth=0, command=self.clear)
        button.grid(row=0, column=1, sticky=tk.NSEW)

    def square(self):
        self.current_expression = str(eval(f"{self.current_expression}**2"))
        self.update_label()

    def create_square_button(self):
        button = tk.Button(self.buttons_frame, text="x\u00b2", bg=OFF_WHITE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE,
                           borderwidth=0, command=self.square)
        button.grid(row=0, column=2, sticky=tk.NSEW)

    def sqrt(self):
        self.current_expression = str(eval(f"{self.current_expression}**0.5"))
        self.update_label()

    def create_sqrt_button(self):
        button = tk.Button(self.buttons_frame, text="\u221ax", bg=OFF_WHITE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE,
                           borderwidth=0, command=self.sqrt)
        button.grid(row=0, column=3, sticky=tk.NSEW)

    def evaluate(self):
        self.total_expression += self.current_expression
        self.update_total_label()
        try:
            self.current_expression = str(eval(self.total_expression))
            self.total_expression = ""
        except Exception as e:
            self.current_expression = "Error"
        finally:
            self.update_label()

    def create_equals_button(self):
        button = tk.Button(self.buttons_frame, text="=", bg=LIGHT_BLUE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE,
                           borderwidth=0, command=self.evaluate)
        button.grid(row=4, column=3, columnspan=2, sticky=tk.NSEW)

    def create_buttons_frame(self):
        frame = tk.Frame(self.frame)
        frame.pack(expand=True, fill="both")
        return frame

    def update_total_label(self):
        expression = self.total_expression
        for operator, symbol in self.operations.items():
            expression = expression.replace(operator, f' {symbol} ')
        self.total_label.config(text=expression)

    def update_label(self):
        self.label.config(text=self.current_expression[:11])

    def create_sin_button(self):
        button = tk.Button(self.buttons_frame, text="sin", bg=OFF_WHITE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE,
                           borderwidth=0, command=lambda: self.special_operation("sin"))
        button.grid(row=1, column=0, sticky=tk.NSEW)

    def create_cos_button(self):
        button = tk.Button(self.buttons_frame, text="cos", bg=OFF_WHITE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE,
                           borderwidth=0, command=lambda: self.special_operation("cos"))
        button.grid(row=2, column=0, sticky=tk.NSEW)

    def create_tan_button(self):
        button = tk.Button(self.buttons_frame, text="tan", bg=OFF_WHITE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE,
                           borderwidth=0, command=lambda: self.special_operation("tan"))
        button.grid(row=3, column=0, sticky=tk.NSEW)

    def create_log_button(self):
        button = tk.Button(self.buttons_frame, text="log", bg=OFF_WHITE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE,
                           borderwidth=0, command=lambda: self.special_operation("log"))
        button.grid(row=4, column=0, sticky=tk.NSEW)

    def create_ln_button(self):
        button = tk.Button(self.buttons_frame, text="ln", bg=OFF_WHITE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE,
                           borderwidth=0, command=lambda: self.special_operation("ln"))
        button.grid(row=0, column=0, sticky=tk.NSEW)

    def create_exp_button(self):
        button = tk.Button(self.buttons_frame, text="exp", bg=OFF_WHITE, fg=LABEL_COLOR, font=DEFAULT_FONT_STYLE,
                           borderwidth=0, command=lambda: self.special_operation("exp"))
        button.grid(row=4, column=1, sticky=tk.NSEW)

    def special_operation(self, operation):
        try:
            if operation == "sin":
                self.current_expression = str(math.sin(math.radians(float(self.current_expression))))
            elif operation == "cos":
                self.current_expression = str(math.cos(math.radians(float(self.current_expression))))
            elif operation == "tan":
                self.current_expression = str(math.tan(math.radians(float(self.current_expression))))
            elif operation == "log":
                self.current_expression = str(math.log10(float(self.current_expression)))
            elif operation == "ln":
                self.current_expression = str(math.log(float(self.current_expression)))
            elif operation == "exp":
                self.current_expression = str(math.exp(float(self.current_expression)))
            self.update_label()
        except ValueError:
            self.current_expression = "Error"
            self.update_label()

class Notepad:
    def __init__(self, frame):
        self.frame = frame
        self.font_settings = ('Helvetica', 14)
        self.available_fonts = list(font.families())
        self.selected_font = tk.StringVar(value=self.font_settings[0])
        
        self.create_widgets()

    def create_widgets(self):
        font_menu = tk.OptionMenu(self.frame, self.selected_font, *self.available_fonts, command=lambda _: self.apply_font())
        font_menu.pack(pady=10)

        self.text_area = tk.Text(self.frame, wrap='word', font=self.font_settings)
        self.text_area.pack(expand=True, fill='both')

        button_frame = tk.Frame(self.frame)
        button_frame.pack(fill='x')

        file_button = tk.Button(button_frame, text="Insert File", command=self.insert_file, font=self.font_settings)
        file_button.pack(side=tk.LEFT, fill='x', expand=True)

        image_button = tk.Button(button_frame, text="Insert Image", command=self.insert_image, font=self.font_settings)
        image_button.pack(side=tk.LEFT, fill='x', expand=True)

        save_button = tk.Button(button_frame, text="Save Tasks", command=self.save_tasks, font=self.font_settings)
        save_button.pack(side=tk.LEFT, fill='x', expand=True)

        load_button = tk.Button(button_frame, text="Load Tasks", command=self.load_tasks, font=self.font_settings)
        load_button.pack(side=tk.LEFT, fill='x', expand=True)

        color_button = tk.Button(button_frame, text="Change Text Color", command=self.change_text_color, font=self.font_settings)
        color_button.pack(side=tk.LEFT, fill='x', expand=True)

    def insert_file(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            self.text_area.insert(tk.END, f"[File] {file_path}\n")

    def insert_image(self):
        file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.png;*.jpg;*.jpeg;*.gif")])
        if file_path:
            self.text_area.insert(tk.END, f"[Image] {file_path}\n")
            self.display_image(file_path)

    def display_image(self, image_path):
        top = Toplevel()
        top.title("Image Viewer")
        img = PhotoImage(file=image_path)
        img_label = Label(top, image=img)
        img_label.image = img  # keep a reference!
        img_label.pack()

    def save_tasks(self):
        tasks = self.text_area.get("1.0", tk.END).strip()
        file_path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON files", "*.json")])
        if file_path:
            with open(file_path, 'w') as file:
                json.dump(tasks, file)

    def load_tasks(self):
        file_path = filedialog.askopenfilename(filetypes=[("JSON files", "*.json")])
        if file_path:
            with open(file_path, 'r') as file:
                tasks = json.load(file)
                self.text_area.delete("1.0", tk.END)
                self.text_area.insert(tk.END, tasks)

    def apply_font(self):
        current_font = self.selected_font.get()
        self.text_area.config(font=(current_font, 14))
        for button in self.frame.winfo_children():
            button.config(font=(current_font, 14))

    def change_text_color(self):
        color = colorchooser.askcolor()[1]
        if color:
            self.text_area.config(fg=color)

class MainApplication:
    def __init__(self, root):
        self.root = root
        self.root.title("Enhanced Calculator and Notepad")
        self.root.geometry("600x700")
        self.tab_control = ttk.Notebook(self.root)
        self.calculator_frame = ttk.Frame(self.tab_control)
        self.notepad_frame = ttk.Frame(self.tab_control)
        self.tab_control.add(self.calculator_frame, text='Calculator')
        self.tab_control.add(self.notepad_frame, text='Notepad')
        self.tab_control.pack(expand=1, fill='both')
        self.calculator = Calculator(self.calculator_frame)
        self.notepad = Notepad(self.notepad_frame)
if __name__ == "__main__":
    root = tk.Tk()
    app = MainApplication(root)
    root.mainloop()
